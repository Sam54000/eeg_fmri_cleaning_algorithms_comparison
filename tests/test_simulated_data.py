
# Generated by CodiumAI
import mne
import pytest
import pandas as pd
from pathlib import Path
from simulated_data import simulate_eeg_data, DummyDataset

@pytest.fixture
def raw_data():
    return simulate_eeg_data()
    
def test_returns_instance_of_rawarray():
    result = simulate_eeg_data()
    assert isinstance(result, mne.io.RawArray)

# The function is called with n_channels = 0.
def test_called_with_n_channels_zero():
    with pytest.raises(ValueError):
        simulate_eeg_data(n_channels=0)

def test_dummy_dataset_called_with_zeros():
    with pytest.raises(ValueError) as e:
        dataset = DummyDataset(n_subjects=0, 
                     n_sessions=0, 
                     n_runs=0)
        print(e)
        
def test_participant_metadata():
    dataset = DummyDataset(n_subjects = 5)
    dataset.create_participants_metadata()
    assert isinstance(dataset.participant_metadata, pd.DataFrame)
    assert dataset.participant_metadata.shape[0] == 5
    nan_mask = dataset.participant_metadata.isna()
    for column in dataset.participant_metadata.columns:
        assert not any(nan_mask[column].values)

def test_add_participant_metadata():
    dataset = DummyDataset(n_subjects = 5)
    dataset.create_participants_metadata()
    dataset._add_participant_metadata(
        participant_id = 'sub-06',
        age = 26,
        sex = 'M',
        handedness = 'R'
    )
    assert isinstance(dataset.participant_metadata, pd.DataFrame)
    assert dataset.participant_metadata.shape[0] == 6
    nan_mask = dataset.participant_metadata.isna()
    for column in dataset.participant_metadata.columns:
        assert not any(nan_mask[column].values)

def test_generate_label():
    dataset = DummyDataset(root = './')
    for i in range(1,12):
        labels = dataset._generate_label('subject', i, 'TEST')
        assert labels == f'sub-TEST{i:03d}'
    labels = dataset._generate_label('subject', 1)
    assert labels == 'sub-001'
    labels = dataset._generate_label('session', 1)
    assert labels == 'ses-001'
    labels = dataset._generate_label('run', 1)
    assert labels == 'run-001'
    
def test_generate_folder_path():
    dataset = DummyDataset(root = '.')
    path = dataset._generate_folder_path('subject', 1)
    assert isinstance(path, Path)
    assert path == Path('RAW/sub-001')
    path = dataset._generate_folder_path('session', 1)
    assert path == Path('RAW/sub001/ses-001')