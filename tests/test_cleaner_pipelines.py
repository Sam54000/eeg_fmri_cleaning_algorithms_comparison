
# Generated by CodiumAI
import json
import os
import tempfile
from pathlib import Path

import bids
import pytest
import simulated_data
from decorators import dummy_dataset

import eeg_fmri_cleaning_algorithms_comparison.cleaner_pipelines as cp


class TestWriteReport:

    # The function appends a message to a txt file.
    def test_append_message_to_txt_file(self):
        # Create a temporary directory
        with tempfile.TemporaryDirectory() as temp_dir:
            # Set up the test data
            message = "This is a test message"
            filename = "test.txt"
            file_path = os.path.join(temp_dir, filename)

            # Call the function under test
            cp.write_report(message, file_path)

            # Check that the file was created and contains the correct message
            assert os.path.exists(file_path)
            with open(file_path, "r") as file:
                mapping =  dict.fromkeys(range(32))
                output_str = file.read()
                res = output_str.translate(mapping)
                assert res == message

    # The filename argument is None. The test function has been fixed to provide a filename argument when calling 'write_report' function.
    def test_filename_argument_is_none_(self):
        # Call the function under test with a filename argument
        try:
            cp.write_report("This is a test message", None)
        except ValueError as e:
            assert str(e) == "The filename must be a string or a Path object."
    
        # Generates a path to save cleaned files in BIDS format with correct initialization
    @dummy_dataset
    def test_make_saving_path(
        self, 
        bids_files: list[bids.layout.models.BIDSFile] = None,
        bids_path: str | os.PathLike = None,):
        
        # Initialize the class object
        bids_file = bids_files[0]
        cleaner = cp.CleanerPipelines(bids_file)
        cleaner.process_history = list()
        procedures = ['GRAD', 'ASR', 'PYPREP']
        for procedure in procedures:
            cleaner.process_history.append(procedure) 
            # Invoke the method
            cleaner._make_derivatives_saving_path()
            # Check if the derivatives path is created
            expected_path = Path(
                os.path.join(
                    bids_path.parent,
                    f'DERIVATIVES/{procedure}',
                    'sub-01',
                    'ses-01',
                    'eeg'
                )
            )
            assert str(cleaner.derivatives_path) == str(expected_path)
            
    @dummy_dataset
    def test_sidecare_copied_at_correct_location(
        self,
        bids_files: list[bids.layout.models.BIDSFile] = None,
        bids_path: str | os.PathLike = None,
        ):
        # Initialize the class object
        bids_file = bids_files[0]
        cleaner = cp.CleanerPipelines(bids_file)
        # Invoke the method
        cleaner.process_history = list()
        procedures = ['GRAD', 'ASR', 'PYPREP']
        for procedure in procedures:
            cleaner.process_history.append(procedure) 
            # Invoke the method
            cleaner._make_derivatives_saving_path()
            cleaner._copy_sidecar()
            path = cleaner.derivatives_path

            expected_filename = Path(
                os.path.join(
                    path,
                    'sub-01',
                    'ses-01',
                    'eeg',
                    'sub-01_ses-01_task-test_run-01_eeg.json'
                )
            )
            assert os.path.isfile(expected_filename)
        
    @dummy_dataset
    def test_save_raw_method(
        self,
        bids_files,
        bids_path
        ):
        cleaner = cp.CleanerPipelines(bids_files[0])
        cleaner.raw = simulated_data.simulate_eeg_data()
        cleaner.process_history = list()
        procedures = ['GRAD', 'ASR', 'PYPREP']
        for procedure in procedures:
            cleaner.process_history.append(procedure) 
            # Invoke the method
            cleaner._make_derivatives_saving_path()
            cleaner._copy_sidecar()
            cleaner._save_raw()
            path = cleaner.derivatives_path

            expected_filename = Path(
                os.path.join(
                    path,
                    'sub-01',
                    'ses-01',
                    'eeg',
                    'sub-01_ses-01_task-test_run-01_eeg.fif'
                )
            )
            assert os.path.isfile(expected_filename)
    
    @dummy_dataset
    def test_function_pipe_eeg_file(self,
                           bids_files,
                           bids_path):
        cleaner = cp.CleanerPipelines(bids_files[0])
        cleaner.raw = simulated_data.simulate_eeg_data()
        procedures = ['GRAD', 'ASR', 'PYPREP']
        cleaner.process_history = procedures
            # Invoke the method
        cleaner.function_testing_decorator()

        expected_eeg_filename = Path(
            os.path.join(
                'DERIVATIVES',
                "_".join(procedures),
                'sub-01',
                'ses-01',
                'eeg',
                'sub-01_ses-01_task-test_run-01_eeg.fif'
            )
        )
        assert os.path.isfile(expected_eeg_filename)

    @dummy_dataset
    def test_function_pipe_json_file(self,
                           bids_files,
                           bids_path):
        cleaner = cp.CleanerPipelines(bids_files[0])
        cleaner.raw = simulated_data.simulate_eeg_data()
        procedures = ['GRAD', 'ASR', 'PYPREP']
        cleaner.process_history = procedures
            # Invoke the method
        cleaner.function_testing_decorator()

        expected_json_filename = Path(
            os.path.join(
                'DERIVATIVES',
                "_".join(procedures),
                'sub-01',
                'ses-01',
                'eeg',
                'sub-01_ses-01_task-test_run-01_eeg.json'
            )
        )
        assert os.path.isfile(expected_json_filename)
