
# Generated by CodiumAI
import pytest
import tempfile
import bids
from pathlib import Path
import os
import eeg_fmri_cleaning_algorithms_comparison.cleaner_pipelines as cp
class TestWriteReport:

    # The function appends a message to a txt file.
    def test_append_message_to_txt_file(self):
        # Create a temporary directory
        with tempfile.TemporaryDirectory() as temp_dir:
            # Set up the test data
            message = "This is a test message"
            filename = "test.txt"
            file_path = os.path.join(temp_dir, filename)

            # Call the function under test
            cp.write_report(message, file_path)

            # Check that the file was created and contains the correct message
            assert os.path.exists(file_path)
            with open(file_path, "r") as file:
                line = file.read()
                assert file.read() == message

    # The filename argument is None. The test function has been fixed to provide a filename argument when calling 'write_report' function.
    def test_filename_argument_is_none_fixed_fixed(self):
        # Call the function under test with a filename argument
        try:
            cp.write_report("This is a test message", None)
        except ValueError as e:
            assert str(e) == "The filename must be a string or a Path object."
    
        # Generates a path to save cleaned files in BIDS format with correct initialization
    def test_generates_path_with_correct_initialization(self):
        # Initialize the class object
        with tempfile.TemporaryDirectory() as temp_dir:
            init_dir = os.path.join(temp_dir, 'BIDS')
            bids_file = bids.layout.models.BIDSFile(
                entity_dict={
                    'path': os.path.join(
                        init_dir,
                        'RAW',
                        'sub-01',
                        'ses-01',
                        'eeg',
                        'sub-01_ses-01_task-checkeroff_run-01_eeg.set'
                    )
                    }
                )
            cleaner = cp(bids_file)
            cleaner.process_history = 'GRAD'
            # Invoke the method
            cleaner._make_derivatives_saving_path()

            # Check if the derivatives path is created
            expected_path = Path(
                os.path.join(
                    init_dir,
                    'DERIVATIVES/GRAD',
                    'sub-01',
                    'ses-01',
                    'eeg'
                )
            )
            assert os.path.isdir(cleaner.derivatives_path)
            assert cleaner.derivatives_path == expected_path